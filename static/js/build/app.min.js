import TWEEN from"@tweenjs/tween.js";import io from"socket.io-client";const socket=io("http://localhost:5000");socket.on("connect",function(){console.log("Connected to the backend server via WebSocket")});socket.on("neural_network_state",function(data){visualizeNeurons(data.neuron_states);visualizeWeights(data.weights);visualizeLastSpikeTime(data.last_spike_times);visualizeIonicCurrents(data.ionic_currents)});socket.on("disconnect",function(){console.log("Disconnected from the backend server")});const scene=new THREE.Scene;const camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);const renderer=new THREE.WebGLRenderer;renderer.setSize(window.innerWidth,window.innerHeight);document.body.appendChild(renderer.domElement);const ambientLight=new THREE.AmbientLight(16777215,.5);scene.add(ambientLight);const directionalLight=new THREE.DirectionalLight(16777215,1);directionalLight.position.set(0,1,0);scene.add(directionalLight);function initializeNetworkStructure(scene){const numInputNeurons=input_size;const numHiddenNeuronsLayer1=hidden_size;const numHiddenNeuronsLayer2=hidden_size;const numOutputNeurons=output_size;const layerDistance=10;const inputLayer=createLayer(numInputNeurons,0,layerDistance,scene);const hiddenLayer1=createLayer(numHiddenNeuronsLayer1,1,layerDistance,scene);const hiddenLayer2=createLayer(numHiddenNeuronsLayer2,2,layerDistance,scene);const outputLayer=createLayer(numOutputNeurons,3,layerDistance,scene);connectLayers(inputLayer,hiddenLayer1,scene);connectLayers(hiddenLayer1,hiddenLayer2,scene);connectLayers(hiddenLayer2,outputLayer,scene)}initializeNetworkStructure(scene);function createNeuronVisualization(position){let geometry=new THREE.SphereGeometry(.5,32,32);let material=new THREE.MeshPhongMaterial({color:65280});let neuron=new THREE.Mesh(geometry,material);neuron.position.copy(position);neuron.name=`neuron_${position.x}_${position.y}_${position.z}`;return neuron}function visualizeNeurons(neuronStates){neuronStates.forEach(neuronData=>{let neuron=scene.getObjectByName(`neuron_${neuronData.position.x}_${neuronData.position.y}_${neuronData.position.z}`);if(!neuron){neuron=createNeuronVisualization(new THREE.Vector3(neuronData.position.x,neuronData.position.y,neuronData.position.z));scene.add(neuron)}updateNeuronVisualization(neuron,neuronData.state)})}function updateNeuronVisualization(neuron,state){neuron.material.color.setHex(state.fired?16711680:65280);neuron.scale.setScalar(state.fired?1.2:1)}function animateNeuronChange(neuron,state){const newColor=state.fired?16711680:65280;const targetScale=state.fired?1.2:1;const colorTween=new TWEEN.Tween(neuron.material.color.getHex()).to(newColor,500).onUpdate(value=>{neuron.material.color.setHex(value)}).start();const scaleTween=new TWEEN.Tween(neuron.scale).to({x:targetScale,y:targetScale,z:targetScale},500).easing(TWEEN.Easing.Elastic.Out).onUpdate(()=>{neuron.scale.set(neuron.scale.x,neuron.scale.y,neuron.scale.z)}).start();requestAnimationFrame(animate);let hhEffect=calculateHHEffect(state.n,state.m,state.h);neuron.material.opacity=hhEffect}function visualizeIonicCurrents(ionicCurrents){ionicCurrents.forEach((current,index)=>{let neuron=scene.getObjectByName("neuron_"+index);if(neuron){neuron.material.emissiveIntensity=mapCurrentToBrightness(current)}})}function mapCurrentToBrightness(current){return Math.abs(current)}let intensity=mapMembranePotentialToColorIntensity(state.membrane_potential);neuron.material.emissiveIntensity=intensity;function visualizeWeights(weights){weights.forEach((weight,index)=>{const fromIndex=weight.from;const toIndex=weight.to;let connection=scene.getObjectByName(`connection_${fromIndex}_${toIndex}`);if(!connection){connection=createConnectionVisualization(fromIndex,toIndex);scene.add(connection)}animateConnectionChange(connection,weight.value)})}function animateConnectionChange(connection,weightValue){const targetLineWidth=Math.abs(weightValue)*10;const newColor=weightValue>0?65280:16711680;const colorTween=new TWEEN.Tween(connection.material.color.getHex()).to(newColor,500).onUpdate(value=>{connection.material.color.setHex(value)}).start();const lineScaleTween=new TWEEN.Tween({linewidth:connection.material.linewidth}).to({linewidth:targetLineWidth},500).onUpdate(value=>{connection.material.linewidth=value.linewidth}).start();requestAnimationFrame(animate)}function createConnectionVisualization(fromIndex,toIndex){let material=new THREE.LineBasicMaterial({color:16777215});let geometry=new THREE.BufferGeometry;let positions=new Float32Array([0,0,0,1,1,1]);geometry.setAttribute("position",new THREE.BufferAttribute(positions,3));let line=new THREE.Line(geometry,material);line.name=`connection_${fromIndex}_${toIndex}`;return line}function updateConnectionVisualization(connection,weightValue){connection.material.linewidth=Math.abs(weightValue)*10;connection.material.color.setHex(weightValue>0?65280:16711680)}function mapMembranePotentialToColorIntensity(potential){return THREE.MathUtils.clamp((potential+70)/100,0,1)}function visualizeLastSpikeTime(lastSpikeTimes){lastSpikeTimes.forEach((lastSpikeTime,index)=>{let neuron=scene.getObjectByName("neuron_"+index);if(neuron){triggerSpikeAnimation(neuron,lastSpikeTime)}})}function triggerSpikeAnimation(neuron,lastSpikeTime){let currentTime=Date.now();let timeSinceLastSpike=currentTime-lastSpikeTime;if(timeSinceLastSpike<1e3){neuron.material.emissive.setHex(16777215)}}function animate(){requestAnimationFrame(animate);TWEEN.update();renderer.render(scene,camera)}animate();window.addEventListener("resize",onWindowResize,false);function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();renderer.setSize(window.innerWidth,window.innerHeight);renderer.setPixelRatio(window.devicePixelRatio||1)}var gui,gui_info,gui_settings;function initGui(){gui=new dat.GUI;gui.width=270;gui_info=gui.addFolder("Info");gui_info.add(neuralNet,"numNeurons").name("Neurons");gui_info.add(neuralNet,"numAxons").name("Axons");gui_info.add(neuralNet,"numSignals",0,neuralNet.settings.limitSignals).name("Signals");gui_info.autoListen=false;gui_settings=gui.addFolder("Settings");gui_settings.add(neuralNet.settings,"currentMaxSignals",0,neuralNet.settings.limitSignals).name("Max Signals");gui_settings.add(neuralNet.particlePool,"pSize",.2,2).name("Signal Size");gui_settings.add(neuralNet.settings,"signalMinSpeed",0,8,.01).name("Signal Min Speed");gui_settings.add(neuralNet.settings,"signalMaxSpeed",0,8,.01).name("Signal Max Speed");gui_settings.add(neuralNet,"neuronSizeMultiplier",0,2).name("Neuron Size Mult");gui_settings.add(neuralNet,"neuronOpacity",0,1).name("Neuron Opacity");gui_settings.add(neuralNet,"axonOpacityMultiplier",0,5).name("Axon Opacity Mult");gui_settings.addColor(neuralNet.particlePool,"pColor").name("Signal Color");gui_settings.addColor(neuralNet,"neuronColor").name("Neuron Color");gui_settings.addColor(neuralNet,"axonColor").name("Axon Color");gui_settings.addColor(sceneSettings,"bgColor").name("Background");gui_info.open();gui_settings.open();gui_settings.__controllers.forEach(controller=>{controller.onChange(updateNeuralNetworkSettings)})}function updateNeuralNetworkSettings(){neuralNet.updateSettings();if(neuralNet.settings.signalMinSpeed>neuralNet.settings.signalMaxSpeed){neuralNet.settings.signalMaxSpeed=neuralNet.settings.signalMinSpeed;gui_settings.__controllers.find(controller=>controller.property==="signalMaxSpeed").updateDisplay()}}function updateGuiInfo(){gui_info.__controllers.forEach(controller=>{controller.updateDisplay()})}function main(){neuralNet=window.neuralNet=new NeuralNetwork;scene.add(neuralNet.meshComponents);initGui();run()}function run(){requestAnimationFrame(run);renderer.setClearColor(sceneSettings.bgColor,1);renderer.clear();update();renderer.render(scene,camera);stats.update()}window.addEventListener("keypress",function(event){var key=event.keyCode;switch(key){case 32:sceneSettings.pause=!sceneSettings.pause;break;case 65:case 97:sceneSettings.enableGridHelper=!sceneSettings.enableGridHelper;break;case 83:case 115:sceneSettings.enableAxisHelper=!sceneSettings.enableAxisHelper;break}});